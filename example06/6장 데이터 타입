데이터 타입

데이터 타입(data type)
    값의 종류
    자바스크립트의 모든 값은 데이터 타입을 갖는다.
    데이타 타입을 줄여서 '타입'이라고도 한다.

원시 타입(primitive type)
    숫자(number) - 숫자. 정수와 실수 구분 없이 하나의 숫자 타입만 존재
    문자열(string) - 문자열
    불리언(boolean) - 논리적 참(true)과 거짓(false)
    undefined - var 키워드로 선언된 변수에 암묵적으로 할당되는 값
    null - 값이 없다는 것을 의도적으로 명시할 때 사용하는 값
    심벌(symbol) - ES6에서 추가된 타입

객체 타입(object/reference type)
    객체, 함수, 배열 등

예로 숫자 타입 1과 문자열 타입 '1'은 비슷해 보이지만 전혀 다른 값이다.
두 값은 생성한 목적과 용도, 확보해야 할 메모리 공간의 크기, 메모리에 저장되는 2진수, 읽어 들여 해석하는 방식 모두 다르다.

숫자 타입
    C, Java의 경우 정수와 실수를 구분해서 int, long, float, double 등과 같은 다양한 숫자 타입을 제공하지만, 자바스크립트는 하나의 숫자 타입만 존재한다.
    숫자 타입의 값은 배정밀도 64비트 부동소수점 형식을 따른다. 즉, 모든 수를 실수로 처리하며, 정수만 표현하기 위한 데이터 타입이 별도로 존재하지 않는다.

문자열 타입
    텍스트 데이터를 나타내는 데 사용
    문자열은 0개 이상의 16비트 유니코드 문자(UTF-16)의 집합으로 전 세계 대부분의 문자를 표현할 수 있다.

    C는 문자열 타입을 제공하지 않고 문자의 배열로 문자열을 표현하고, Java는 문자열을 객체로 표현한다.
    그러나 자바스크립트의 문자열은 원시 타입이며, 변경 불가능한 값(immutable value)이다.
    이것은 문자열이 생성되면 그 문자열을 변경할 수 없다는 것을 의미한다. (불변성)

불리언 타입
    논리적 참, 거짓을 타나내는 true와 false만을 값으로 가진다.

undefined 타입
    유일하게 undefined만을 값으로 가진다.
    var 키워드로 선언한 변수는 암묵적으로 undefined로 초기화된다.
    즉, 변수 선언에 의해 확보된 메모리 공간을 처음 할당이 이뤄질 때까지 빈 상태로 내버려두지 않고 자바스크립트 엔진이 undefined로 초기화한다.
    따라서 변수를 선언한 이후 값을 할당하지 않은 변수를 참조하면 undefined가 반환된다.
    개발자가 의도적으로 할당하기 위한 값이 아니라 자바스크립트 엔진이 변수를 초기화할 때 사용하는 값이다.
    개발자가 의도적으로 변수에 할당한다면 본래 취지와 어긋날뿐더러 혼란을 줄 수 있으므로 null을 사용하는 것을 권장한다.

null 타입
    유일하게 null만을 값으로 가진다.
    자바스크립트는 대소문자를 구분하므로 null은 Null, NULL 등과 다르다.
    프로그래밍 언어에서 null은 변수에 값이 없다는 것을 의도적으로 명시할 때 사용한다.
    변수에 null을 할당하는 것은 변수가 이전에 참조하던 값을 더 이상 참조하지 않겠다는 의미다.
    이는 이전에 할당되어 있던 값에 대한 참조를 명시적으로 제거하는 것으로, 자바스크립트 엔진은 누구도 참조하지 않는 메모리 공간에 대해 가비지 콜렉션을 수행할 것이다.
    함수가 유효한 값을 반환할 수 없는 경우 명시적으로 null을 반환하기도 한다.

심벌 타입
    ES6에서 추가된 7번째 타입으로, 변경 불가능한 원시 타입의 값이다.
    다른 값과 중복되지 않는 유일무이한 값으로, 주로 이름이 충돌할 위험이 없는 객체의 유일한 프로퍼티 키를 만들기 위해 사용한다.
    심벌 이외의 원시 값은 리터럴을 통해 생성하지만 심벌은 Symbol 함수를 호출해 생성한다.
    이때 생성된 심벌 값은 외부에 노출되지 않으며, 다른 값과 절대로 중복되지 않는 유일무이한 값이다.

객체 타입
    자바스크립트의 데이터 타입은 원시 타입과 객체 타입으로 분류하는데, 그 이유는 두 타입은 근본적으로 다르다는 의미가 있다.
    이후 자세히 살펴보겠지만, 자바스크립트는 객체 기반 언어이며, 자바스크립트를 이루고 있는 거의 모든 것이 객체라는 것이다.

데이터 타입의 필요성
    데이터 타입에 의한 메모리 공간의 확보와 참조
        값은 메모리에 저장하고 참조할 수 있어야 한다.
        메모리에 값을 저장하려면 먼저 확보해야 할 메모리 공간의 크기를 결정해야 한다.
        즉, 몇 바이트의 메모리 공간을 사용해야 낭비와 손실 없이 값을 저장할 수 있는지 알야아 한다.
    데이터 타입에 의한 값의 해석
        메모리에 읽어 들인 2진수를 어떻게 해석해야 하는가?
        모든 값은 데이터 타입을 가지며, 메모리에 2진수, 즉 비트의 나열로 저장된다.
        메모리에 저장된 값은 데이터 타입에 따라 다르게 해석될 수 있다.
        예로 메모리에 저장된 값 0100 0001을 숫자로 해석하면 65지만 문자열로 해석하면 'A'다.
        변수에 할당된 값의 타입에 따라 변수를 참조할 때 메모리 공간의 주소에서 읽어 들인 값을 해석한다.

    즉, 데이터 타입이 필요한 이유는 
    - 값을 저장할 때 확보해야 하는 메모리 공간의 크기를 결정하기 위해
    - 값을 참조할 때 한 번에 읽어 들여야 할 메모리 공간의 크기를 결정하기 위해
    - 메모리에서 읽어 들인 2진수를 어떻게 해석할 지 결정하기 위해

동적 타이핑
    동적 타입 언어와 정적 타입 언어
        자바스크립트의 모든 값은 데이터 타입을 갖는다. 그렇다면 변수는 데이터 타입을 가질까?

        C나 Java 같은 정적 타입(static/strong type) 언어는 변수를 선얼할 때 변수의 할당할 수 있는 값의 종류, 즉 데이터 타입을 사전에 선언해야 한다.
        이를 명시적 타입 선언(explicit type declaration)이라 한다.
        정적 타입 언어는 변수의 타입을 변경할 수 없으며, 변수에 선언한 타입에 맞는 값만 할당할 수 있다.
        정적 타입 언어는 컴파일 시점에 타입 체크(선언한 데이터 타입에 맞는 값을 할당했는지 검사)를 수행한다.
        이를 통해 타입의 일관성을 강제함으로써 안정적인 코드의 구현을 통해 런타임에 발생하는 에러를 줄인다.

        자바스크립트는 정적 타입 언어와 다르게 변수를 선언할 때 타입을 선언하지 않는다.
        다만 var. let, const 키워드를 사용해 변수를 선언할 뿐이다.
        자바스크립트의 변수는 어떠한 데이터 타입의 값이라도 자유롭게 할당할 수 있다.

        변수는 타입을 가질까? 기본적으로 변수는 타입을 갖지 않는다.
        하지만 값은 타입을 갖고, 현재 변수에 할당되어 있는 값에 의해 변수의 타입이 동적으로 결정된다고 표현하는 것이 적절하다.
    
    동적 타입 언어와 변수
        동적 타입 언어는 변수에 어떤 데이터 타입의 값이라도 자유롭게 할당할 수 있다.
        하지만 동적 타입 언어의 구조적 단점이 존재한다.

        변수의 타입이 고정되어 있지 않고 동적으로 변하는 동적 타입 언어의 변수는 값의 변경에 의해 타입도 언제든 변경될 수 있다.
        따라서 동적 타입 언어의 변수는 값을 확인하기 전에는 타입을 확신할 수 없다.

        자바스크립트는 개발자의 의도와는 상관없이 자바스크립트 엔진에 의해 암묵적으로 타입이 자동으로 변환되기도 한다.

        변수 사용 시 주의사항
            변수는 필요한 경우에 한해 제한적으로 사용
            변수의 유효 범위(소프코)를 최대한 좁게 사용
            전역 변수는 자제하여 사용
            변수보다는 상수를 사용해 값의 변경을 억제
            변수 이름은 변수의 목적, 의미를 파악할 수 있도록 네이밍