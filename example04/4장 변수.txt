변수

1급 객체 | 값처럼 다룰 수 있는 요소
    함수(Function) | ✅ 예 | 값처럼 전달, 할당, 반환 가능
    객체(Object) | ✅ 예 | 참조형 값으로 1급 객체
    배열(Array) | ✅ 예 | 객체의 일종, 다룰 수 있음
    숫자(Number), 문자열(String) | ✅ 예 | 기본형이지만 값처럼 완전 사용 가능
    this 키워드 | ❌ 아니오 | 스코프에 따라 동적으로 바뀌는 예약어, 값이 아님
    연산자(+, -, === 등) | ❌ 아니오 | 표현식 요소일 뿐 값으로 다룰 수 없음
    조건문(if), 반복문(for) | ❌ 아니오 | 실행 구조이지 값이 아님

키워드
    자바스크립트 코드를 해석하고 실행하는 자바스크립트 엔진이 수행할 동작을 규정한 일종의 명령어
    자바스크립트 엔진은 키워드를 만나면 자신이 수행해야 할 약속된 동작을 수행한다.

자바스크립트 엔진은 변수 선언을 2단계를 거쳐 수행한다.
    1. 선언 단계: 변수 이름을 등록해서 자바스크립트 엔진에 변수의 존재를 알린다.
    2. 초기화 단계: 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined를 할당해 초기화한다.
    변수를 포함한 모든 식별자는 선언이 필요하다. 선언하지 않은 식별자에 접근하면 ReferenceError(참조 에러)가 발생한다.

실행 컨텍스트
    변수 이름을 비롯한 모든 식별자는 실행 컨텍스트에 등록된다.
    엔진이 소스코드를 평가하고 실행하기 위해 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역이다.
    자바스크립트 엔진은 실행 컨텍스트를 통해 식별자와 스코프를 관리한다.
    변수 이름과 변수 값은 실행 컨텍스트 내에 키-값 형식인 객체로 등록되어 관리된다.

스코프
    코드를 작성할 때 어떤 변수에 접근할 수 있는지 결정하는 문법적 규칙
    함수, 블록({}) 등으로 나뉘고, 정적인 특징이 있어 코드가 작성될 때 정해진다.

호이스팅
    자바스크립트에서 변수나 함수 선언이 코드 실행 전에 해당 스코프의 최상단으로 끌어올려지는 현상
    즉, 선언은 먼저 처리되고, 그 후 코드가 실행되는 것처럼 동작한다.
변수 호이스팅
    var는 선언만 호이스팅되고 값은 평가 과정 이후에 적용된다.
    let, const는 호이스팅은 되지만, 초기화 전까지 접근할 수 없다.
함수 호이스팅
    함수 선언식은 완전히 호이스팅되지만 함수 표현식은 호이스팅되지 않는다.

const 키워드
    const 키워드로 선언한 변수는 재할당이 금지된다.
    즉, const 키워드는 단 한 번만 할당할 수 있는 변수를 선언한다.
    따라서 const 키워드를 사용하면 상수를 표현할 수 있다.
    하지만 const 키워드는 반드시 상수만을 위해 사영하지는 않는다.

가비지 콜렉터
    애플리케이션이 할당한 메모리 공간을 주기적으로 검사하여 더 이상 사용되지 않는 메모리를 해제하는 기능이다.
    더 이상 사용되지 않는 메모리란 어떤 식별자도 참조하지 않는 메모리 공간을 의미한다.
    가비지 콜렉터를 통해 메모리 누수를 방지한다.
    (자바스크립트는 매니지드 언어로 메모리의 할당 및 해제를 위한 메모리 관리 기능을 언어 차원에서 담당한다.)

식별자
    어떤 값을 구별해서 식별해낼 수 있는 고유한 이름
    식별자 네이밍 규칙
        식별자는 특수문자를 제외한 문자, 숫자, 언더스코어(_), 달러 기호($)를 포함할 수 있다.
        단, 식별자는 특수문자를 제외한 문자, 언더스코어(_), 달러 기호($)로 시작해야 한다. 숫자로 시작하는 것은 허용하지 않는다.
        예약어는 식별자로 사용할 수 없다.